from RBACrun import RBACrun

class RBACda(RBACrun, process):
    def trans(E):
        T = E.copy()
        while some((x,z) in T, (z,y) in E, has= (x,y) not in T):
            T.add((x,y))
        return T | set((r,r) for r in ROLES)

    # copied from hierRBAC.GeneralHierRBAC, 
    # except trans(RH) is first lifted to a local variable
    def AuthorizedUsers(role):
        assert role in ROLES
        transrh = trans(RH)         # lifted
        return set(u for u in USERS for asc in ROLES 
#std               if (asc,role) in RH and (u,asc) in UR)
                   if (asc,role) in transrh and (u,asc) in UR)

  

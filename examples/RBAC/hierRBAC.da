from coreRBAC import CoreRBAC

# hierarchical RBAC with general role hierarchies
class GeneralHierRBAC(CoreRBAC, process):
    def setup(OBJS,OPS,USERS, ROLES,PR,UR, SESSIONS,SU,SR, RH):  pass
        # RH subset ROLES * ROLES, where asc inh desc 

    # transitive-reflexive closure of a relation E and ROLES
    def transclo(E):
        T = set(E)
        W = set((x,d) for (x,y) in T for (a,d) in E if y==a) - T
        while bool(W):
            T.add(W.pop())
            W = set((x,d) for (x,y) in T for (a,d) in E if y==a) - T
        return T | set((r,r) for r in ROLES)

#std    # transitive reduction of a relation E, unique for acyclic graphs
#std    def transred(E):
#std        T = set(E)
#std        W = set((a,d) for (a,d) in T 
#std                if (a,d) in transclo(T - set([(a,d)])))
#std        while bool(W):
#std            T.remove(W.pop())
#std            W = set((a,d) for (a,d) in T 
#std                    if (a,d) in transclo(T - set([(a,d)])))
#std        return W

    def trans(E): return transclo(E)

# administrative commands: four new ones defined

    def AddInheritance(asc, desc):
        assert asc in ROLES
        assert desc in ROLES
#std-R  assert (asc,desc) not in transred(RH)
#std    assert (desc,asc) not in RH
        assert (asc,desc) not in RH               #+
        RH.add((asc,desc))
#std    RH |= set((r1,r2) for r1 in ROLES for r2 in ROLES
#std               if (r1,desc) in RH and (asc,r2) in RH)

    def DeleteInheritance(asc,desc):
        assert asc in ROLES
        assert desc in ROLES
#std    assert (asc,desc) in transred(RH)
        RH.remove((asc,desc))
#std    RH = transclo(transred(RH) - set([(asc,desc)]))

    def AddAsccendant(asc,desc):
        AddRole(asc)
        AddInheritance(asc,desc)    
           
    def AddDescendant(asc,desc):
        AddRole(desc)
        AddInheritance(asc,desc)

# supporting system functions: two redefined, but same as in CoreRBAC except
# that, in the precondition, AssignedRoles is replaced with AuthorizedRoles

    def CreateSession(user, session, ars):
        assert user in USERS
        assert session not in SESSIONS
        assert ars.issubset(AuthorizedRoles(user))
        SESSIONS.add(session)
        SU.add((session,user))
        SR |= set((session,r) for r in ars)

    def AddActiveRole(user, session, role):
        assert user in USERS
        assert session in SESSIONS
        assert role in ROLES
        assert (session,user) in SU
        assert (session,role) not in SR
        assert role in AuthorizedRoles(user)
        SR.add((session,role))

# review functions: two new ones defined, but same as AssignedUsers and
# AssignedRoles in CoreRBAC except for adding use of asc and RH

    def AuthorizedUsers(role):
        assert role in ROLES
        return set(u for u in USERS for asc in ROLES 
#std               if (asc,role) in RH and (u,asc) in UR)
                   if (asc,role) in trans(RH) and (u,asc) in UR)

    def AuthorizedRoles(user):
        assert user in USERS
        return set(r for r in ROLES for asc in ROLES 
#std               if (user,asc) in UR and (asc,r) in RH)
                   if (user,asc) in UR and (asc,r) in trans(RH))
                
# advanced review functions: four redefined, but same as in CoreRBAC except
# for adding use of acs and/or desc and RH

    def RolePermissions(role):
        assert role in ROLES
        return set((op,obj) for desc in ROLES 
                   for op in OPS for obj in OBJS 
#std               if (role,desc) in RH and ((op,obj),desc) in PR)
                   if (role,desc) in trans(RH) and ((op,obj),desc) in PR)

    def UserPermissions(user):
        assert user in USERS
        return set((op,obj) for asc in ROLES for desc in ROLES
                   for op in OPS for obj in OBJS 
#std               if (user,asc) in UR and (asc,desc) in RH
                   if (user,asc) in UR and (asc,desc) in trans(RH)
                   and ((op,obj),desc) in PR)

    def RoleOperationsOnObject(role, object):
        assert role in ROLES
        assert object in OBJS
        return set(op for desc in ROLES for op in OPS 
#std               if (role,desc) in RH and ((op,object),desc) in PR)
                   if (role,desc) in trans(RH) and ((op,object),desc) in PR)

    def UserOperationsOnObject(user, object):
        assert user in USERS
        assert object in OBJS
        return set(op for asc in ROLES for desc in ROLES 
                   for op in OPS 
#std               if(user,asc) in UR and (asc,desc) in RH 
                   if(user,asc) in UR and (asc,desc) in trans(RH)
                   and ((op,object),desc) in PR)

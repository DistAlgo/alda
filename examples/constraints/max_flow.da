def constraint(name= 'max_flow', pars={s,t,vertex,capacity}):
  # Variables:
  s: int                                      # the source node
  t: int                                      # the sink node
  vertex: set[int]                            # all vertices
  capacity: dict(key=(vertex,vertex),val=int) # set of edges with capacity
  limit: int = max(capacity)                  # upperbound of flow
  flow: dict(key=(vertex,vertex),val=ints(0,limit))       # a flow
  
  # Constraints
  # the flow on each arc must not exceed the capacity
  c = each(u in vertex, v in vertex, has= flow[u,v] <= capacity[u,v])
  # the total flow of all arcs leading into a node equals the total flow out of it
  f = each(v in vertex, has= v == s or v == t or 
         sumof(flow[u,v], u in vertex) == sumof(flow[v,u], u in vertex))
        
  # Target:
  # find a flow of maximum amount for the entire network
  obj: int = sumof(flow[u,t], u in vertex)
  return anyof(flow, c, f, to_max(obj))



from pprint import pprint

# data from https://developers.google.com/optimization/flow/maxflow
s = 1
t = 5
vertex = {1,2,3,4,5}
capacity = [[0,20,30,10,0],
            [0,0,40,0,30],
            [0,0,0,10,20],
            [0,0,5,0,20],
            [0,0,0,0,0]]

result = query(constraint='max_flow')
pprint(result)
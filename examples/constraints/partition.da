def constraint(name= 'partition', pars={n, X}):
    # Variables
    n: int  # the maximum integer involved in the problem
    X: dict(key= ints(1,n), val= int)   # a multiset of int
    ub: int = max(X)
    S: dict(key= ints(1,n), val= ints(0,ub))   # a subset of X
    T: dict(key= ints(1,n), val= ints(0,ub))   # a subset of X
    
    # Constraints
    # S+T = X
    partition= each(i in ints(1,n), has= S[i]+T[i] == X[i])
    # sum of the numbers in S equals those of T
    eq= sumof(S[i]*i, i in ints(1,n)) == sumof(T[i]*i, i in ints(1,n))
    
    # Target:
    # find the partition S and T that satisfy the constraints
    return anyof((S,T), partition, eq)



from pprint import pprint

n = 2
X = [4,1]

result = query(constraint='partition')
pprint(result)
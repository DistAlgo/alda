def constraint(name= 'set_packing', parameter={X,subsets,S}):
	# Variables
	X: set[int]  		# the universe
	subsets: set[int]	# id of subsets in S
	# S[i,j]: the ith subset in S contains the jth element in the universe
	S: dict(key= (subsets, X), val= ints(0,1))
	# indicate the subset of S
	T: dict(key= subsets, val= ints(0,1))
	
	# Constraints
	# sets in T are mutually disjoint
	disjoint = each(i in X, has= sumof(T[j]*S[j,i], j in subsets) <= 1)
	
	# Target
	# find the set packing of maximum size
	return anyof(T, disjoint, to_max(sum(T)))



from pprint import pprint

X = {1,2,3,4,5}
subsets = {1,2,3,4,5,6}
# S = {{1},{1,3,5},{2,5},{2,3,4},{4,5},{5}}
S = [[1,0,0,0,0],
     [1,0,1,0,1],
     [0,1,0,0,1],
     [0,1,1,1,0],
     [0,0,0,1,1],
     [0,0,0,0,1] ]

result = query(constraint='set_packing')
pprint(result)
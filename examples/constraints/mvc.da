def constraint(name= 'mvc', parameter={vertex, edge}):
	# Variables
	vertex: set[int]                                  # set of vertices
	edge: dict(key= (vertex, vertex), val= ints(0,1)) # set of edges
	# a set of vertices formulating a vertex cover
	mvc: dict(key= vertex, val= ints(0,1))
	
	# Constraints
	# at least one vertex of each edge is in the vertex cover
	cover = each(i in vertex, j in vertex, has=
	             edge[i,j] == 0 or mvc[i] == 1 or mvc[j] == 1)
	
	# Target
	# find a vertex cover of the minimum size
	return anyof(mvc, cover, to_min(sum(mvc)))



from pprint import pprint

# data from https://en.wikipedia.org/wiki/Maximal_independent_set
vertex = {1,2,3,4,5,6,7,8}
edge = [[0,1,1,0,0,0,1,0],
		[1,0,0,1,0,0,0,1],
		[1,0,0,1,1,0,0,0],
		[0,1,1,0,0,1,0,0],
		[0,0,1,0,0,1,1,0],
		[0,0,0,1,1,0,0,1],
		[1,0,0,0,1,0,0,1],
		[0,1,0,0,0,1,1,0]]

result = query(constraint='mvc')
pprint(result)
def constraint(name= 'color', parameter={vertex, color, edge}):
    # Variables:
    vertex: set[int]                                        # set of vertice
    edge: dict(key= (vertex,vertex), val= ints(0,1))        # set of edges
    color: set[int]                                         # set of colors
    coloring: dict(key= vertex, val= color)   # a map from vertex to color
    
    # Constraints:
    # no adjacent vertices have the same color
    c = each(i in vertex, j in vertex, has= 
             i == j or edge[i,j] == 0 or coloring[i] != coloring[j])
    
    # Target:
    # find a coloring that satisfies the constraint
    return anyof(coloring, c)



from pprint import pprint

vertex = {1,2,3,4};
color = {1,2,3,4}
edge = [[0,0,1,1],
        [0,0,0,0],
        [1,0,0,0],
        [1,0,0,0]]
# vertex = {'us', 'china', 'canada', 'mexico'}
# edge = {('us', 'canada'), ('us', 'mexico')}
# color = {'red', 'green', 'yellow', 'blue'}

result = query(constraint='color')
pprint(result)
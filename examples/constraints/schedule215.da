def constraint(name='schedule', parameter={students, slots, prefs}):  #studdents, slots, (student, slot) pairs
   # Variables
   students: set[int]
   slots: set[int]
   assign: dict(key=(students, slots), val=ints(0,1))# (student, slot) pairs, one for each student
   prefs: dict(key=(students, slots), val=ints(0,1))
   
   # Constraints
   # each students are assigned to some slot
   # c1 = each(s in students, has= some(t in slots, has=assign[s,t] == 1))
   # or ?
   # each studtens are assigned to exactly one slot
   c1 = each(s in students, has= sumof(assign[s,t], t in slots) == 1)
   # each slot is assigned no more than 6 student
   c2 = each(t in slots, has= sumof(assign[s,t], s in students) <=6)
   
   # Target
   # assign students to slots and maximize their preference
   maxpref:int = sumof(prefs[s,t]*assign[s,t], s in students, t in slots)
   return anyof(assign, c1, c2, to_max(maxpref))

from random import random
from pprint import pprint
students = set(ints(114))#set(range(1,115))#ints(1,114)
slots = set(ints(19))#set(range(1,20))#ints(1,19)
prefs = [[1 if random() < 0.4 else 0 for t in slots] for s in students]	#prefs = {(s,t) for s in students for t in slots if random()<0.04}
# pprint(prefs)
assignment = query(constraint='schedule')
assign = assignment['assign']
pprint([(s,t) for s in students for t in slots if assign[s-1][t-1] == 1])
# pprint(assignment)
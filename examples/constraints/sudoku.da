def csp_sudoku(s,puzzle=None):
	# Variables:
	s: int          # size of the sub grids
	n: int = s*s    # size of the board
	puzzle: dict[key:(int[1:n],int[1:n]),val:int[1:n]]
	                # grid of n*n, the filling of the play board 
	# Constraints:
	# the numbers in each row are pairwisely different
	row = each(i in int[1:n], has= alldiff(puzzle[i,j], j in int[1:n]))
	# the numbers in each column are pairwisely different
	column = each(j in int[1:n], has= alldiff(puzzle[i,j], i in int[1:n]))
	# the numbers in each sub-grid are pairwisely different
	square = each(i in int[1:n], j in int[1:n], has=
	         alldiff(puzzle[s*(i-1)+p, s*(j-1)+q], p in int[1:n], q in int[1:n]))
	# Target:
	# find a filling of puzzle that satisfies the constraint
	return anyof(puzzle, row, column, square)

from pprint import pprint
_=None
puzzle = [[_, _, _, _, _, _, _, _, _],
		  [_, 6, 8, 4, _, 1, _, 7, _],
		  [_, _, _, _, 8, 5, _, 3, _],
		  [_, 2, 6, 8, _, 9, _, 4, _],
		  [_, _, 7, _, _, _, 9, _, _],
		  [_, 5, _, 1, _, 6, 3, 2, _],
		  [_, 4, _, 6, 1, _, _, _, _],
		  [_, 3, _, 2, _, 7, 6, 9, _],
		  [_, _, _, _, _, _, _, _, _]]

result=csp_sudoku(3,puzzle)
pprint(result)
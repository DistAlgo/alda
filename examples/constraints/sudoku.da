def constraint(name='sudoku', pars={s}):
	# Variables:
	s: int          # size of the sub grids
	n: int = s*s    # size of the board
	puzzle: dict(key=(ints(1,n),ints(1,n)),val=ints(1,n))
	                # grid of n*n, the filling of the play board 

	# Constraints:
	# the numbers in each row are pairwisely different
	row = each(i in ints(1,n), has= alldiff(puzzle[i,j], j in ints(1,n)))
	# the numbers in each column are pairwisely different
	column = each(j in ints(1,n), has= alldiff(puzzle[i,j], i in ints(1,n)))
	# the numbers in each sub-grid are pairwisely different
	square = each(i in ints(1,s), j in ints(1,s), has=
	         alldiff(puzzle[s*(i-1)+p, s*(j-1)+q], p in ints(1,s), q in ints(1,s)))

	# Target:
	# find a filling of puzzle that satisfies the constraint
	return anyof(puzzle, row, column, square)



from pprint import pprint

puzzle = [[_, _, _, _, _, _, _, _, _],
		  [_, 6, 8, 4, _, 1, _, 7, _],
		  [_, _, _, _, 8, 5, _, 3, _],
		  [_, 2, 6, 8, _, 9, _, 4, _],
		  [_, _, 7, _, _, _, 9, _, _],
		  [_, 5, _, 1, _, 6, 3, 2, _],
		  [_, 4, _, 6, 1, _, _, _, _],
		  [_, 3, _, 2, _, 7, 6, 9, _],
		  [_, _, _, _, _, _, _, _, _]]

result = query(constraint='sudoku',s=3)
pprint(result)
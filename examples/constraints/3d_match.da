def constraint(name= '3d_matching', parameter={T,U}):
	# Variables
	T: set[int]                             # the universe
	U: dict(key= (T, T, T), val= ints(0,1)) # U = TxTxT
	M: dict(key= (T, T, T), val= ints(0,1)) # subset of U
	
	# Constraints
	# M is a subset of U
	subset = each(i in T, j in T, k in T, has= M[i,j,k] == 0 or U[i,j,k] == 1)
	# each element in the universe appears at most at one dimension of U, 
	# and in each dimension appears only once
	match = each(i in T, has= 
	             sumof(M[i,s,t]+M[s,i,t]+M[s,t,i],s in T,t in T)<=1)
	# perfect = sum(M) == len(T)
	
	# Target
	# find the matching of maximum size
	# return anyof(M, subset, match, perfect, to_max(sum(M)))
	return anyof(M, subset, match, to_max(sum(M)))



from pprint import pprint

T = {1,2,3}
U =[[[1,1,1],
	 [1,1,1],
	 [1,1,1]],
	[[1,1,1],
	 [1,1,1],
	 [1,1,1]],
	[[1,1,1],
	 [1,1,1],
	 [1,1,1]]]
	 
result = query(constraint='3d_matching')
pprint(result)
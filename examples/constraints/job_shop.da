def csp_job_shop(n, m, machine, duration):
	n: int  # the number of jobs
	m: int  # the maximum number of tasks of a single job
	# the duration of tasks for each job
	duration: dict[key:(int[1:n],int[1:m]), val:int]
	# the maximum possible time to complete the task
	maxtime: int = sumof(duration[j,t], j in int[1:n], t in int[1:m])
	# machine[j,t]: the machine on which task t of job j is executed
	machine: dict[key: (int[1:n], int[1:m]), val: int]
	# the assigned starting time of tasks for each job
	assign: dict[key:(int[1:n],int[1:m]), val:int[1:maxtime]]
	
	# Constraints:
	# for each job, a task can only start after its previous task is finished
	order = each(j in int[1:n], t in int[2:m], has= 
	             assign[j,t] >= assign[j,t-1]+duration[j,t-1])
	# a machine can only perform one job at a time
	single = each(j1 in int[1:n],t1 in int[1:m],j2 in int[1:n],t2 in int[1:m], 
	              has= (j1 == j2 and t1 == t2) or 
	                   machine[j1,t1] != machine[j2,t2] or
	                   assign[j1,t1] >= assign[j2,t2]+duration[j2,t2] or 
	                   assign[j2,t2] >= assign[j1,t1]+duration[j1,t1])
	
	# Target:
	# find an assignment of starting time for each task
	# that minimize the total execution time
	obj: int = maxof(assign[j,t]+duration[j,t], j in int[1:n], t in int[1:m])
	return anyof(assign, order, single, to_min(obj))



from pprint import pprint

# data from https://developers.google.com/optimization/scheduling/job_shop
# job 0 = [(0, 3), (1, 2), (2, 2)]
# job 1 = [(0, 2), (2, 1), (1, 4)]
# job 2 = [(1, 4), (2, 3)]
n = 3;
m = 3;
machine = [[1,2,3],
		   [1,3,2],
		   [2,3,0]]
duration = [[3,2,2],
			[2,1,4],
			[4,3,0]]

result = csp_job_shop(n, m, machine, duration)
pprint(result)

def constraint(name= 'hitting_set', parameter={X,subsets,S}):
	# Variables
	X: set[int]  		# the universe
	subsets: set[int]   # id of subsets in S
	# S[i,j]: the ith subset in S contains the jth element in the X
	S: dict(key= (subsets, X), val= ints(0,1))
	# a subset of X
	T: dict(key= X, val= ints(0,1))
	
	# Constraints
	# T contains at least one element from each subset in S
	hitting = each(j in subsets, has= some(i in X, has= S[j,i]*T[i] == 1))
	
	# Target
	# find the hitting set of minimum number of elements
	return anyof(T, hitting, to_min(sum(T)))



from pprint import pprint

X = {1,2,3,4,5}
subsets = {1,2,3}
S = [[1,0,1,1,0],
	 [0,1,0,0,1],
	 [1,1,1,1,0]]

result = query(constraint='hitting_set')
pprint(result)
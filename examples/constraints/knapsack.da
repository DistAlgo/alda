def constraint(name= 'knapsack', parameter= {item, size, value, capacity}):
  # Variables:
  item: set[int]                       # number of items
  size: dict(key=item,val=int)         # size of items
  value: dict(key=item,val=int)        # value of items
  capacity: int                        # capacity of the knapsack
  choice: dict(key=item,val=ints(0,1)) # the items put into the knapsack
  
  # Constraints:
  # the total size of items in the knapsack must not surpass capacity
  c = sumof(size[i]*choice[i], i in item) <= capacity
  
  # Target:
  # find a choice of items of maximum value
  obj: int = sumof(value[i]*choice[i], i in item)
  return anyof(choice, c, to_max(obj))



from pprint import pprint

# data from https://en.wikipedia.org/wiki/Knapsack_problem
capacity = 15
item = {1,2,3,4,5}
size = [1,1,2,4,12]
value = [1,2,2,10,4]

result = query(constraint='knapsack')
pprint(result)
def constraint(name= 'min_cost_flow', parameter={s,t,vertex,capacity,cost,sd}):
  # Variables:
  s: int                                      # the source node
  t: int                                      # the sink node
  vertex: set[int]                            # all vertices
  capacity: dict(key=(vertex,vertex),val=int) # set of edges with capacity
  limit: int = max(capacity)                  # the limit of flow
  cost: dict(key=(vertex,vertex),val=int)     # the cost for the edges
  sd: dict(key=vertex,val=int)   # a map from vertex to supply(+)/demand(-)
  flow: dict(key=(vertex,vertex),val=ints(0,limit))   # a flow
  
  # Constraints
  # the flow on each arc must not exceed the capacity
  c = each((u, v) in vertex, has= flow[u,v] <= capacity[u,v])
  # the total flow of all arcs leading into a node equals the total flow out of it
  def f():
    each(v in vertex, has= v == s or v == t or 
         sumof(flow[u, v], u in vertex)+sd[v] == sumof(flow[v, u], u in vertex))
    sd[s] + sumof(flow[u, s], u in vertex) >= sumof(flow[s, u], u in vertex)
    sd[t] + sumof(flow[u, t], u in vertex) >= sumof(flow[t, u], u in vertex)

  # Target:
  # find a flow of maximum amount for the entire network
  obj: int = sumof(cost[u,v]*flow[u,v], (u, v) in vertex)
  return anyof(flow, c, f, to_min(obj))



from pprint import pprint

# data from https://developers.google.com/optimization/flow/mincostflow
s = 1;
t = 5;
vertex = {1,2,3,4,5}
capacity = [[0,15,8,0,0],
            [0,0,20,4,10],
            [0,0,0,15,5],
            [0,0,0,0,20],
            [0,0,5,0,0]]
cost = [[0,4,4,0,0],
        [0,0,2,2,6],
        [0,0,0,1,3],
        [0,0,0,0,2],
        [0,0,3,0,0]]
sd = [20,0,0,-5,-15];

result = query(constraint='min_cost_flow')
pprint(result)
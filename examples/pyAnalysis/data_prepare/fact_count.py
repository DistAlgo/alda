""" using 3 ways of counting the generated facts and compare there results
    1. grepping 'ClassDef' in all files under astFacts
    2. in the files generated by pyast_views.py, counting the '(' in file ClassDef under text-rep
    3. in the generated .P file to give to XSB, count the number of facts/lines.

count while try to find duplicates
"""
import logging
import logging.config
logging.config.fileConfig('logging.conf')
logger = logging.getLogger('fact_count')

import os, sys
from pprint import pformat

class Count:
    def __init__(self, project):
        self.project_folder = os.path.join('../data', project)
        # dictionary of count of each type of AST node
        self.astFactDict = dict()
        self.astFactSet = dict()
        self.txtReprDict = dict()
        self.factFileDict = dict()

    def count_astFacts(self):
        """ also find duplicates """
        logger.info('count_astFacts')
        folder = os.path.join(self.project_folder, 'astFacts')
        duplicates = dict()
        for file in os.listdir(folder):
            if not file.startswith('.'):
                logger.info(file)
                input_file = os.path.join(folder, file)
                lines = open(input_file,'r').readlines()
                for l in lines:
                    t = eval(l)
                    if isinstance(t, tuple):
                        node_type = t[0]
                        if node_type not in self.astFactDict:
                            self.astFactDict[node_type] = []
                            self.astFactSet[node_type] = set()
                        if t in self.astFactSet[node_type]:
                            if node_type not in duplicates:
                                duplicates[node_type] = []
                            if (self.factFileDict[t], t) not in duplicates[node_type]:
                                duplicates[node_type].append((self.factFileDict[t], t))
                            self.factFileDict[t].add(file)
                        else:
                            self.factFileDict[t] = {file}
                            self.astFactSet[node_type].add(t)
                        self.astFactDict[node_type].append(t)
                    else:
                        logger.error('strange things')
                        logger.info(pformat(t))
        
        if duplicates:
            logger.info('❌ duplicates detected!')
            logger.info(pformat(duplicates))



    def count_textRepr(self):
        logger.info('count_textRepr')
        folder = os.path.join(self.project_folder, 'text-rep')
        for file in os.listdir(folder):
            if not file.startswith('.') and file not in {'is_Sub', 'ValueIdDict', 'FileDict', 'ValueDict'}:
                # logger.info(file)
                input_file = os.path.join(folder, file)
                self.txtReprDict[file] = sum(1 for line in open(input_file))
 
    def count(self):
        self.count_astFacts()
        self.count_textRepr()
        for key, val in self.txtReprDict.items():
            if key in self.astFactDict:
                if val == len(self.astFactDict[key]):
                    logger.info(f'✅ number of facts for {key}: {val}')
                else:
                    logger.info(f'❌ number of facts for {key}: text-pre - {val}; astFacts - {len(self.astFactDict[key])}')
            else:
                logger.error(f'fact {key} not presented in astFactDict')


if __name__ == '__main__':
    project = 'numpy' if len(sys.argv) < 2 else sys.argv[1]
    logger.info(f'counting facts in project: {project}')
    Count(project).count()
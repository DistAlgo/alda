# this file contains test cases for ruleset defined in a method
# with different local and non-local predicates

def trans_method_1():
    def rules_trans():
        path(x,y), if_(edge_global(x,y))
        path(x,y), if_(edge_global(x,z), path(z,y))
    return infer(rule = rules_trans, queries = ['path'])


def trans_method_2(edge):
    def rules_trans():
        path(x,y), if_(edge(x,y))
        path(x,y), if_(edge(x,z), path(z,y))
    return infer(rule=rules_trans, bindings = [('edge', edge)], queries=['path'])


def trans_method_3():
    def rules_trans():
        path_global(x,y), if_(edge_global(x,y))
        path_global(x,y), if_(edge_global(x,z), path_global(z,y))
    return infer(rule=rules_trans)

# test with global "edge" predicate
correct_result = {(1,2), (1,3), (2,3)}
edge_global = {(1,2), (2,3)}
qr = trans_method_1()
assert (qr == correct_result), ('WRONG RESULT: QUERY 1 !!!!!!!!!!!\nQuery result: ' + str(qr))


# test with local "edge" predicate
correct_result = {(4,5), (4,6), (5,6)}
edge = {(4,5), (5,6)}
qr = trans_method_2(edge)
assert (qr == correct_result), ('WRONG RESULT: QUERY 2 !!!!!!!!!!!\nQuery result: ' + str(qr))


# test with global "edge" and "path" predicates

# !!! this case currently fails. The program gets NameError: name 'rules_trans' is not defined
# Note that when we comment the assertion line ("assert ....."), the program runs without error,
# but we cannot test if it works correctly. We have also tried to print the "path_global" using
# print(path_global), but got the same error.

# we have also tried with the following variations of the test case, but it also fails:
# - declare global variable "path_global" before the rule's definition: "path_global" is still not updated correctly.

correct_result = {(1,2), (1,3), (2,3)}
path_global = {}
trans_method_3()
assert (path_global == correct_result), ('WRONG RESULT: QUERY 3 !!!!!!!!!!!\nQuery result: ' + str(path_global))
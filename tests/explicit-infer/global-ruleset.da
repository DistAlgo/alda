# this file contains test cases for ruleset defined in global scope
# with different local and non-local predicates

def rules_trans():
    path(x,y), if_(edge(x,y))
    path(x,y), if_(edge(x,z), path(z,y))


class Graph1(process):
    def setup(E, correct_result): pass

    def trans(E):
        return infer(rule=rules_trans, bindings = [('edge', E)], queries=['path'])

    def run():
        result = trans(E)
        assert (result == correct_result), ('WRONG RESULT: QUERY 4 !!!!!!!!!!!\nQuery result: ' + str(result))


def rules_trans_1():
    path(x,y), if_(edge_global(x,y))
    path(x,y), if_(edge_global(x,z), path(z,y))


edge_global = {(1,2), (2,3)}

class Graph2(process):
    def setup(correct_result): pass

    def trans():
        return infer(rule=rules_trans_1, queries=['path'])

    def run():
        result = trans()
        assert (result == correct_result), ('WRONG RESULT: QUERY 5 !!!!!!!!!!!\nQuery result: ' + str(result))

# test with local predicates and explicit binding to 'edge' predicate to local var 'edge'
def test_local_var_explicit_binding(E):
    return infer(rule = rules_trans, bindings = [('edge', E)], queries=['path'])

correct_result = {(1,2), (1,3), (2,3)}
edge_local = {(1,2), (2,3)}
qr = test_local_var_explicit_binding(edge_local)
assert (qr == correct_result), ('WRONG RESULT: QUERY 1 !!!!!!!!!!!\nQuery result: ' + str(qr))

# test with local predicates and implicit binding of 'edge' predicate to local var 'edge'
# !!! this test fails with message: NameError: name 'edge' is not defined
def test_local_var_implicit_binding(edge):
    return infer(rule = rules_trans, queries=['path'])

qr = test_local_var_implicit_binding(edge_local)
assert (qr == correct_result), ('WRONG RESULT: QUERY 1.1 !!!!!!!!!!!\nQuery result: ' + str(qr))

# test with global "edge" predicate
correct_result = {(4,5), (4,6), (5,6)}
edge = {(4,5), (5,6)}
qr = infer(rule = rules_trans, queries = ['path'])
assert (qr == correct_result), ('WRONG RESULT: QUERY 2 !!!!!!!!!!!\nQuery result: ' + str(qr))


# test with global "edge" and "path" predicates

# !!! this case currently fails. The global variable "path" is not updated after the "infer" call.
# we have also tried with the following variations of the test case, but they also fail:
# - declare global variable "path" before the rule's definition: "path" is still not updated correctly.
# - store the return value of the "infer" call to a variable: the return value is None as expected since
# the "queries" parameter is not specified.

path = {}
infer(rule = rules_trans)
print('Result query 3: ' + str(path))
assert (path == correct_result), ('WRONG RESULT: QUERY 3 !!!!!!!!!!!\nQuery result: ' + str(path))


# test with using the global ruleset definition in class definitions
def main():
    correct_result = {(7,8), (7,9), (8,9)}
    edge_class = {(7,8), (8,9)}
    o1 = new(Graph1, [edge_class, correct_result])
    start(o1)

    correct_result = {(1,2), (1,3), (2,3)}
    o2 = new(Graph2, [correct_result])
    start(o2)

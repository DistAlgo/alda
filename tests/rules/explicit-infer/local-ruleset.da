# test cases for ruleset defined in a method scope, with the predicates in various scopes.

def trans_method_1():
    def rules_trans():
        path(x,y), if_(edge_global(x,y))
        path(x,y), if_(edge_global(x,z), path(z,y))
    return infer(rule = rules_trans, queries = ['path'])

def trans_method_2(edge):
    def rules_trans():
        path(x,y), if_(edge(x,y))
        path(x,y), if_(edge(x,z), path(z,y))
    return infer(rules=rules_trans, bindings = [('edge', edge)], queries=['path'])

# test with global edge predicate
correct_result = {(1,2), (1,3), (2,3)}
edge_global = {(1,2), (2,3)}
qr = trans_method_1()
assert (qr == correct_result), ('WRONG RESULT: QUERY 1!\nQuery result: ' + str(qr))

# test with edge predicate bound by call to infer
correct_result = {(4,5), (4,6), (5,6)}
edge = {(4,5), (5,6)}
qr = trans_method_2(edge)
assert (qr == correct_result), ('WRONG RESULT: QUERY 2!\nQuery result: ' + str(qr))

# test with global edge predicate and global path predicate
# !!! this case currently fails.  trans_method_3 throws NameError: name 'rules_trans' is not defined

correct_result = {(1,2), (1,3), (2,3)}
path_global = None

def trans_method_3():
    def rules_trans():
        path_global(x,y), if_(edge_global(x,y))
        path_global(x,y), if_(edge_global(x,z), path_global(z,y))

    infer(rules=rules_trans)
    return True

trans_method_3()
assert (path_global == correct_result), ('WRONG RESULT: QUERY 3!\nQuery result: ' + str(path_global))
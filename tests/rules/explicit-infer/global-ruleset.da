# test cases for ruleset defined in global scope, with the predicates in various scopes.

def rules_trans():
    path(x,y), if_(edge(x,y))
    path(x,y), if_(edge(x,z), path(z,y))

# test global rule set used inside a class, with edge predicate bound by call to infer and rule-local path predicate
class Graph1(process):
    def setup(E, correct_result): pass

    def trans(E):
        return infer(rules=rules_trans, bindings = [('edge', E)], queries=['path'])

    def run():
        result = trans(E)
        assert (result == correct_result), ('WRONG RESULT: QUERY 4!\nQuery result: ' + str(result))

def rules_trans_1():
    path(x,y), if_(edge_global(x,y))
    path(x,y), if_(edge_global(x,z), path(z,y))


edge_global = {(1,2), (2,3)}

# test global rule set used inside a class, with global edge predicate and rule-local path predicate
class Graph2(process):
    def setup(correct_result): pass

    def trans():
        return infer(rules=rules_trans_1, queries=['path'])

    def run():
        result = trans()
        assert (result == correct_result), ('WRONG RESULT: QUERY 5!\nQuery result: ' + str(result))

# test with edge predicate bound by call to infer and rule-local path predicate
def test_local_var_explicit_binding(E):
    return infer(rule = rules_trans, bindings = [('edge', E)], queries=['path'])

correct_result = {(1,2), (1,3), (2,3)}
edge_local = {(1,2), (2,3)}
qr = test_local_var_explicit_binding(edge_local)
assert (qr == correct_result), ('WRONG RESULT: QUERY 1!\nQuery result: ' + str(qr))

# test with global edge predicate and rule-local path predicate
correct_result = {(4,5), (4,6), (5,6)}
edge = {(4,5), (5,6)}
qr = infer(rule = rules_trans, queries = ['path'])
assert (qr == correct_result), ('WRONG RESULT: QUERY 2!\nQuery result: ' + str(qr))

# test with global edge predicate and rule-local path predicate
# !!! this case currently fails. path_global is unchanged after the call.
path_global = None
def rules_trans_2():
    path_global(x,y), if_(edge(x,y))
    path_global(x,y), if_(edge(x,z), path_global(z,y))

infer(rule = rules_trans_2, bindings = [('edge', edge_global)])
assert (path_global == correct_result), ('WRONG RESULT: QUERY 3!\nQuery result: ' + str(path_global))


def main():
    correct_result = {(7,8), (7,9), (8,9)}
    edge_class = {(7,8), (8,9)}
    o1 = new(Graph1, [edge_class, correct_result])
    start(o1)

    correct_result = {(1,2), (1,3), (2,3)}
    o2 = new(Graph2, [correct_result])
    start(o2)

# test cases with arguments (instead of just predicate name) in queries and 
# with more complex expressions in bindings

def rules_trans_1():
    path(x,y), if_(edge(x,y))
    path(x,y), if_(edge(x,z), path(z,y))
    path(x,x), if_(self_loop(x))
    two_edges(x,y), if_(edge(x,z), edge(z,y))


# tests with arguments in the queries
edge = {(1,2), (2,3)}
self_loop = {1,3}
correct_path_query = {(1,2), (1,3), (2,3), (1,1), (3,3)}
corect_two_edges_query = {(1,3)}

qr_1 = infer(rule = rules_trans_1, queries = ['path(_,_)','two_edges(_,_)'])
assert (correct_path_query == qr_1[0]), ('WRONG RESULT: QUERY 1!\nQuery result: ' + str(qr_1[0]))
assert (corect_two_edges_query == qr_1[1]), ('WRONG RESULT: QUERY 2!\nQuery result: ' + str(qr_1[1]))

correct_path_query_from_1 = {1,2,3}
corect_two_edges_query_to_3 = {1}

qr_2 = infer(rule = rules_trans_1, queries = ['path(1,_)','two_edges(_,3)'])
assert (correct_path_query_from_1 == qr_2[0]), ('WRONG RESULT: QUERY 3!\nQuery result: ' + str(qr_2[0]))
assert (corect_two_edges_query_to_3 == qr_2[1]), ('WRONG RESULT: QUERY 4!\nQuery result: ' + str(qr_2[1]))


# !!! This test fails. The result of the first query should be an empty set, 
# and the result of the second query should be {1}. 
# However, the infer call returns the same result {1} for both queries.
# If the order of the queries is reversed, both queries return an empty set.
# It appears that when there are multiple queries of the same predicate, 
# the system returns the value of the last such query for all of them.

correct_two_edges_query_from_3 = set()
qr_3 = infer(rule = rules_trans_1, queries = ['two_edges(3,_)','two_edges(_,3)'])
print(qr_3)
assert (correct_two_edges_query_from_3 == qr_3[0]), ('WRONG RESULT: QUERY 5!\nQuery result: ' + str(qr_3[0]))
assert (corect_two_edges_query_to_3 == qr_3[1]), ('WRONG RESULT: QUERY 6!\nQuery result: ' + str(qr_3[1]))


# test with bindings where the set expression is more complicated than a variable
edges = {1,2,3,4,5,6}
correct_path_query_1 = {(1,2), (1,3), (2,3), (1,1)}
qr_4 = infer(rule = rules_trans_1, bindings = [('self_loop', {s for s in edges if (s % 2 and s < 3)})], queries = ['path'])
assert (correct_path_query_1 == qr_4), ('WRONG RESULT: QUERY 7!\nQuery result: ' + str(qr_4))


#  test with constants in premises of rules.
friend = {('john', 'mary'), ('bob', 'mary'), ('bob', 'john')}
def rules_friends():
    johns_friends(x), if_(friend('john', x))
    johns_friends(x), if_(friend(x, 'john'))
    has_friend(x), if_(friend(x,_))
    has_friend(y), if_(friend(_,y))

qr_5 = infer(rule = rules_friends, queries = ['johns_friends', 'has_friend'])
correct_johns_friends_query = {'mary', 'bob'}
correct_has_friend_query = {'mary', 'bob', 'john'}
assert (correct_johns_friends_query == qr_5[0]), ('WRONG RESULT: QUERY 8!\nQuery result: ' + str(qr_5[0]))
assert (correct_has_friend_query == qr_5[1]), ('WRONG RESULT: QUERY 9!\nQuery result: ' + str(qr_5[1]))

# test with constants in premises and conclusions of rules.
# !!! this test fails.  result is empty set.
def rules_trans_const():
    edge1(1,y), if_(edge(1,y))

correct_edge1_query = {(1,2)}
qr_6 = infer(rule = rules_trans_const, queries = ['edge1'])
assert (correct_edge1_query == qr_6), ('WRONG RESULT: QUERY 10!\nQuery result: ' + str(qr_6))


# test where a variable has the same name as a predicate, 
# and a variable (namely x) has the same name as a global variable.
x = 1
def rules_trans_3():
    path(path,path_1), if_(edge(path,path_1))
    path(x,y), if_(edge(x,z), path(z,y))
    path(edge,edge), if_(self_loop(edge))
    two_edges(x,y), if_(edge(x,z), edge(z,y))

qr_7 = infer(rule = rules_trans_3, queries = ['path'])
assert (correct_path_query == qr_7), ('WRONG RESULT: QUERY 11!\nQuery result: ' + str(qr_7))


# this file contains test cases for ruleset defined in class

class Graph(process):
    def setup(edge):
        self.path = {}

    def rules_trans():
        path(x,y), if_(edge(x,y))
        path(x,y), if_(edge(x,z), path(z,y))

    def run():
        correct_result = {(1,2), (1,3), (2,3)}
        # test if there is an implicit call to infer rules_trans and the "path" field is updated
        if path != correct_result:
            print('WRONG RESULT: QUERY 1 !!!!!!!!!!!\npath: ' + str(path))

        # test if update a base predicate will automatically call to infer as expected
        edge = {(4,5), (5,6)}
        correct_result = {(4,5), (4,6), (5,6)}
        if edge == {(4,5), (5,6)}:
            if path != correct_result:
                print('WRONG RESULT: QUERY 2 !!!!!!!!!!!\npath: ' + str(path))
        else:
            print('BASE PREDICATE IS NOT UPDATED CORRECTLY 1 !!!!!!!!!!!\nedge: ' + str(edge))

        edge.add((6,7))
        correct_result = {(4,5), (4,6), (4,7), (5,6), (5,7), (6,7)}
        if edge == {(4,5), (5,6), (6,7)}:
            if path != correct_result:
                print('WRONG RESULT: QUERY 3 !!!!!!!!!!!\npath: ' + str(path))
        else:
            print('BASE PREDICATE IS NOT UPDATED CORRECTLY 2 !!!!!!!!!!!\nedge: ' + str(edge))

        edge -= {(6,7)}
        correct_result = {(4,5), (4,6), (5,6)}
        if edge == {(4,5), (5,6)}:
            if path != correct_result:
                print('WRONG RESULT: QUERY 4 !!!!!!!!!!!\npath: ' + str(path))
        else:
            print('BASE PREDICATE IS NOT UPDATED CORRECTLY 3 !!!!!!!!!!!\nedge: ' + str(edge))


        # test that updates to derived predicates of a ruleset outside the ruleset definition are not allowed.
        # !!! this test case fails. There is no error when updating a derived predicate outside the ruleset def.
        path.add((1,2))
        if path == {(4,5), (4,6), (5,6), (1,2)}:
            print('THERE IS NO ERROR UPDATING THE NON-LOCAL DERIVED PREDICATE!!!!!!!!!!!')
        else:
            print('DERIVED PREDICATE IS NOT UPDATED CORRECTLY 1!!!!!!!!!!!\npath: ' + str(path))

        # !!! this test case fails. The "path" variable is not updated as expected.
        # check the 'path''s value in the error message
        path = {(1,2)}
        if path == {(1,2)}:
            print('THERE IS NO ERROR UPDATING THE NON-LOCAL DERIVED PREDICATE!!!!!!!!!!!')
        else:
            print('DERIVED PREDICATE IS NOT UPDATED CORRECTLY 2!!!!!!!!!!!\npath: ' + str(path))

def main():
    edge_local = {(1,2), (2,3)}
    o = new(Graph, [edge_local])
    start(o)

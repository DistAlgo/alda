import pickle, os

ASTNodes = {#'AST','mod',
			'Module','Interactive','Expression','Suite',
			#'stmt',
			'FunctionDef','AsyncFunctionDef','ClassDef',
			'Return','Delete','Assign','AugAssign','AnnAssign',
			'For','AsyncFor','While','If','With','AsyncWith',
			'Raise','Try','Assert','Import','ImportFrom',
			'Global','Nonlocal','Expr','Pass','Break','Continue',
			#'expr',
			'BoolOp','BinOp','UnaryOp','Lambda','IfExp',
			'Dict','Set','ListComp','SetComp','DictComp','GeneratorExp',
			'Await','Yield','YieldFrom','Compare','Call',
			'Num','Str','FormattedValue','JoinedStr','Bytes','NameConstant',
			'Ellipsis','Constant',
			'Attribute','Subscript','Starred','Name','List','Tuple',
			#'expr_context',
			'Load','Store','Del','AugLoad','AugStore','Param',
			#'slice',
			'Slice','ExtSlice','Index',
			#'boolop',
			'And','Or',
			#'operator',
			'Add','Sub','Mult','MatMult','Div','Mod','Pow','LShift','RShift','BitOr','BitXor','BitAnd','FloorDiv',
			#'unaryop',
			'Invert','Not','UAdd','USub',
			#'cmpop',
			'Eq','NotEq','Lt','LtE','Gt','GtE','Is','IsNot','In','NotIn',
			'comprehension',
			#'excepthandler',
			'ExceptHandler',
			'arguments','arg','keyword','alias','withitem',
			# util nodes
			'is_Sub', 'Member','Context','ListLen',
			}

class Analyzer():
	def __init__(self, package, mode, query):
		filename = './data/%s' % package
		self.packName = os.path.basename(filename)
		bak = os.path.join(filename,'_state')
		if not (os.path.exists(bak) and os.listdir(bak)):
			print('Warning: package %s not exists' % self.packName)
			return
		for y in os.listdir(bak):
			if y.startswith('.'):
				continue
			setattr(self,y,pickle.load(open(os.path.join(bak,y),'rb')))

		for x in ASTNodes:
			if not hasattr(self, x):
				setattr(self, x, set())

		self.filename = filename
		self.mode = mode
		self.query = query

	def run(self):
		utime1, stime1, cutime1, cstime1, elapsed_time1 = os.times()
		eval('self.query_%s_%s' %(self.query,self.mode))()
		utime2, stime2, cutime2, cstime2, elapsed_time2 = os.times()
		print('python_total\t%s\t%s' % (elapsed_time2-elapsed_time1, utime2-utime1 + stime2-stime1 + cutime2-cutime1 + cstime2-cstime1))

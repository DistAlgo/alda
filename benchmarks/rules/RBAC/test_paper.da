"""
This is a copy of test.da altered for ease of testing for 
our paper with respect to a dataset.

This loads/sets up all of the relevant data except:
-  you need to pass one of RBACpy, RBACda, RBACunion, 
RBACallloc, RBACnonloc as the first argument
- put workload in run method of RBACrun.da

Sample command:
python3.9 -m da --message-buffer-size=40960000 --rule test_paper.da --workloadcount 100 --workloadmode random --mode RBACpy

"""
import sys, pickle, importlib, argparse, os

parser = argparse.ArgumentParser()
parser.add_argument('--workloadcount', type= int, default= 50)  
parser.add_argument('--workloadmode', type= str, default= 'random')
parser.add_argument('--mode', type= str, default= 'RBACda')
args=parser.parse_args()
workload = pickle.load(open(os.path.join('workloads', f'workload_{args.workloadmode}_{args.workloadcount}'), 'rb'))

def main():
    objs = set()
    ops = set()  
    users = set(range(5000))
    roles = set(range(500))
    pr = set()
    ur = pickle.load(open('input/UR_500','rb'))
    sessions = set()
    su = set()
    sr = set()
    rh = pickle.load(open('input/RH_500','rb'))
  
    ssdnames = set()
    ssdnr = set()
    ssdnc = set()    
    
    rbacClass = importlib.import_module(args.mode)
    RBAC = eval('rbacClass.'+args.mode)
    rbac = new(RBAC, [objs,ops,users,roles,pr,ur,sessions,su,sr,rh])

    start(rbac)

from hierRBAC import GeneralHierRBAC

class RBACallloc(GeneralHierRBAC, process):
    def rules_trans_role_rs(): # with additional last rule
        path(x,y), if_(edge(x,y))
        path(x,y), if_(edge(x,z), path(z,y))
        path(x,x), if_(role(x))
  
    def trans(E):  # use infer only, pass in also ROLES
        return infer(rules=rules_trans_role_rs, 
                     bindings=[('edge',E),('role',ROLES)], queries=['path'])

    # copied from hierRBAC.GeneralHierRBAC, 
    # except trans(RH) is first lifted to a local variable
    def AuthorizedUsers(role):
        assert role in ROLES
        transrh = trans(RH)         # lifted
        return set(u for u in USERS for asc in ROLES 
#std               if (asc,role) in RH and (u,asc) in UR)
                   if (asc,role) in transrh and (u,asc) in UR)

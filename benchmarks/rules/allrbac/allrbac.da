import sys, os, argparse

class CoreRBAC(process):

    def setup(USERS,ROLES,UR,PR,OBJS,OPS,SESSIONS,SU,SR): pass
        # self.OBJS = set(range(num_objs))  
        # # self.OPS = set()   # an operation-object pair is called a permission
        # self.OPS = set(range(5))
        # self.USERS = _users
        # self.ROLES = _roles
        # self.PR = _pr # PR subset (OPS * OBJS) * ROLES, for PA in std
        # self.UR = _ur # UR subset USERS * ROLES,    for UA in std
        # self.SESSIONS = set()
        # self.SU = set() # SU subset SESSIONS * USERS
        # self.SR = set() # SR subset SESSIONS * ROLES

    # administrative commands

    def AddUser(user):
        assert user not in USERS
        USERS.add(user)

    def DeleteUser(user):
        assert user in USERS
        UR -= set((user,r) for r in ROLES)    # maintain UR
        for s in set(s for s in SESSIONS if (s,user) in SU):
            DeleteSession(user,s)         # maintain sessions
        USERS.remove(user)                 # delete user last  -yl

    def AddRole(role):
        assert role not in ROLES
        ROLES.add(role)

    def DeleteRole(role):
        assert role in ROLES
        PR -= set(((op,obj),role) for op in OPS for obj in OBJS)
        UR -= set((u,role) for u in USERS)    # maintain PR and UR
        for (s,u) in set((s,u) for s in SESSIONS for u in USERS
            if (s,u) in SU and (s,role) in SR):
            DeleteSession(u,s)            # maintain sessions
        ROLES.remove(role)                         # delete role last  -cw

    def AssignUser(user, role):
        assert user in USERS
        assert role in ROLES
        assert (user,role) not in UR
        UR.add((user,role))

    def DeassignUser(user, role):
        assert user in USERS
        assert role in ROLES
        assert (user,role) in UR
        for s in set(s for s in SESSIONS 
           if (s,user) in SU and (s,role) in SR):
            DeleteSession(user,s)            # maintain sessions
        UR.remove((user,role))

    def GrantPermission(operation, object, role):
        assert operation in OPS and object in OBJS
        assert role in ROLES
        assert ((operation,object),role) not in PR  #+
        PR.add(((operation,object),role))

    def RevokePermission(operation, object, role):
        assert operation in OPS and object in OBJS
        assert role in ROLES
        assert ((operation,object),role) in PR
        PR.remove(((operation,object),role))

# supporting system functions

    def CreateSession(user, session, ars):
        assert user in USERS
        assert session not in SESSIONS
        assert ars.issubset(AssignedRoles(user))
        SESSIONS.add(session)  # add first for subset constraints  -ag
        SU.add((session,user))  # ok to do in any order if atomic   -yl
        SR |= set((session,r) for r in ars)

    def DeleteSession(user, session):
        assert user in USERS
        assert session in SESSIONS
        assert (session,user) in SU
        SU.remove((session,user))
        SR -= set((session,r) for r in ROLES)    # maintain SR
        SESSIONS.remove(session)            # maintain SESSIONS

    def AddActiveRole(user, session, role):
        assert user in USERS
        assert session in SESSIONS
        assert role in ROLES
        assert (session,user) in SU
        assert (session,role) not in SR
        assert role in AssignedRoles(user)
        SR.add((session,role))

    def DropActiveRole(user, session, role):
        assert user in USERS
        assert session in SESSIONS
        assert role in ROLES
        assert (session,user) in SU
        assert (session,role) in SR
        SR.remove((session,role))

    def CheckAccess(session, operation, object):
        assert session in SESSIONS
        assert operation in OPS
        assert object in OBJS
        return bool(set(r for r in ROLES
                        if (session,r) in SR
                        and ((operation,object),r) in PR))

# review functions

    def AssignedUsers(role):
        assert role in ROLES
        return set(u for u in USERS if (u,role) in UR)

    def AssignedRoles(user):
        assert user in USERS
        return set(r for r in ROLES if (user,r) in UR)

# advanced review functions

    def RolePermissions(role):
        assert role in ROLES
        return set((op,obj) for op in OPS for obj in OBJS 
            if ((op,obj),role) in PR)

    def UserPermissions(user):
        assert user in USERS
        return set((op,obj) for r in ROLES
           for op in OPS for obj in OBJS
                   if (user,r) in UR and ((op,obj),r) in PR)

    def SessionRoles(session):
        assert session in SESSIONS
        return set(r for r in ROLES if (session,r) in SR)

    def SessionPermissions(session):
        assert session in SESSIONS
        return set((op,obj) for r in ROLES
                    for op in OPS for obj in OBJS
                    if (session,r) in SR and ((op,obj),r) in PR)

    def RoleOperationsOnObject(role, object):
        assert role in ROLES 
        assert object in OBJS
        return set(op for op in OPS if ((op,object),role) in PR)

    def UserOperationsOnObject(user, object):
        assert user in USERS
        assert object in OBJS
        return set(op for r in ROLES for op in OPS
                   if (user,r) in UR and ((op,object),r) in PR)

# 151 lines; about half are asserts (47), spaces (22-1+4), or comments (4) only



class GeneralHierRBAC(CoreRBAC,process):


    def setup(USERS,ROLES,UR,PR,OBJS,OPS,SESSIONS,SU,SR,RH,workload):
        # super().setup(USERS, _roles, _ur, _pr, num_objs)
        # self.workload = _workload
        self.RH = RH
        self.transRH = set()
        self.authorizedUR = set()
        self.CA = set()
        

    # def transclo(E):
    #     T = set(E)
    #     W = set((x,d) for (x,y) in T for (a,d) in E if y==a) - T
    #     while bool(W):
    #         T.add(W.pop())
    #         W = set((x,d) for (x,y) in T for (a,d) in E if y==a) - T
    #     return T | set((r,r) for r in self.ROLES)

    # # transitive reduction of a relation E, unique for acyclic graphs
    # def transred(E):
    #     T = set(E)
    #     W = set((a,d) for (a,d) in T 
    #         if (a,d) in transclo(T - set([(a,d)])))
    #     while bool(W):
    #         T.remove(W.pop())
    #         W = set((a,d) for (a,d) in T 
    #             if (a,d) in transclo(T - set([(a,d)])))
        # return T

    def AddInheritance(asc, desc):
        assert asc in ROLES
        assert desc in ROLES
    #std-R  assert (asc,desc) not in transred(RH)
        assert (asc,desc) not in transRH
        assert (desc,asc) not in transRH
        # RH |= set((r1,r2) for r1 in ROLES for r2 in ROLES
        #            if (r1,asc) in RH and (desc,r2) in RH)
        RH.add((asc,desc))

    def DeleteInheritance(asc,desc):
        assert asc in ROLES
        assert desc in ROLES
        assert (asc,desc) in RH
        RH.remove((asc,desc))
        # RH = transclo(transred(RH) - set([(asc,desc)]))

    def AddAsccendant(asc,desc):
        AddRole(asc)
        AddInheritance(asc,desc)    
       
    def AddDescendant(asc,desc):
        AddRole(desc)
        AddInheritance(asc,desc)

# supporting system functions: two redefined, but same as in CoreRBAC except
# that, in the precondition, AssignedRoles is replaced with AuthorizedRoles

    def CreateSession(user, session, ars):
        assert user in USERS
        assert session not in SESSIONS
        assert ars.issubset(AuthorizedRoles(user))
        SESSIONS.add(session)
        SU.add((session,user))
        SR |= set((session,r) for r in ars)

    def AddActiveRole(user, session, role):
        assert user in USERS
        assert session in SESSIONS
        assert role in ROLES
        assert (session,user) in SU
        assert (session,role) not in SR
        assert role in AuthorizedRoles(user)
        SR.add((session,role))

# review functions: two new ones defined, but same as AssignedUsers and
# AssignedRoles in CoreRBAC except for adding use of asc and RH
  
    def rules_authorizedUR_rs():
        transRH(x,y), if_(RH(x,y))
        transRH(x,y), if_(RH(x,z), transRH(z,y))
        transRH(x,x), if_(ROLES(x))

    def rules_rules_authorizedUR_rs():
        authorizedUR(u,role), if_(USERS(u), ROLES(asc), UR(u,asc), transRH(asc ,role))

    def AuthorizedUsers(role):
        assert role in ROLES
        return setof(u, (u,_role) in authorizedUR)
        # return set(u for u in USERS for asc in ROLES 
        #        if (asc,role) in RH and (u,asc) in UR)
    
    def AuthorizedRoles(user):
        assert user in USERS
        return setof(r, (_user,r) in authorizedUR)
        # return set(r for r in ROLES for asc in ROLES 
        #        if (user,asc) in UR and (asc,r) in RH)
        
# advanced review functions: four redefined, but same as in CoreRBAC except
# for adding use of acs and/or desc and RH

    def RolePermissions(role):
        assert role in ROLES
        return set((op,obj) for desc in ROLES 
               for op in OPS for obj in OBJS 
               if (role,desc) in transRH and ((op,obj),desc) in PR)

    def UserPermissions(user):
        assert user in USERS
        return set((op,obj) for asc in ROLES for desc in ROLES
               for op in OPS for obj in OBJS 
               if (user,desc) in authorizedUR 
               and ((op,obj),desc) in PR)

    def RoleOperationsOnObject(role, object):
        assert role in ROLES
        assert object in OBJS
        return set(op for desc in ROLES for op in OPS 
               if (role,desc) in transRH and ((op,object),desc) in PR)

    def UserOperationsOnObject(user, object):
        assert user in USERS
        assert object in OBJS
        return set(op for asc in ROLES for desc in ROLES 
               for op in OPS 
               # if(user,asc) in UR and (asc,desc) in RH
               if (user,desc) in authorizedUR 
               and ((op,object),desc) in PR)

    def CheckAccess(session, operation, object):
        assert session in SESSIONS
        assert operation in OPS
        assert object in OBJS
        # return bool(set(r for r in ROLES
        #                 if (session,r) in SR
        #                 and ((operation,object),r) in PR))
        return (session, operation, object) in CA

    def rules_checkaccess():
        CA(session, operation, object), if_(SR(session, role), PR((operation, object), role), ROLES(role))

    # def run():
    #     await(received(('done',)))

    # def receive(msg=('query', qid, query), from_= p):
    #     op, args = query
    #     try:
    #         result = eval(op)(*args)
    #         send(('answer', qid, result), to= p)
    #     except Exception as e:
    #         send(('answer', qid, e), to= p)
    def run():
        # cp = cProfile.Profile()
        utime1, stime1, cutime1, cstime1, elapsed_time1 = os.times()
        # cp.enable()
        for op, pr in workload:
            for p in pr:
                eval('self.'+op)(*p)
        # cp.disable()
        utime2, stime2, cutime2, cstime2, elapsed_time2 = os.times()
        print('python_total\t%s\t%s' % (elapsed_time2-elapsed_time1, utime2-utime1 + stime2-stime1 + cutime2-cutime1 + cstime2-cstime1))
  
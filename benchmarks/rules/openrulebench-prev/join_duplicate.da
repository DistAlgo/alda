def rules_join_duplicate():
  p1_a(X, Y), if_(p1_b1(X, Z),p1_b2(Z, Y))
  p1_b1(X, Y), if_(p1_c1(X, Z),c2(Z, Y))
  p1_b2(X, Y), if_(c3(X, Z),c4(Z, Y))
  p1_c1(X, Y), if_(d1(X, Z),d2(Z, Y))
  p2_a(X, Y), if_(p2_b1(X, Z),p2_b2(Z, Y))
  p2_b1(X, Y), if_(p2_c1(X, Z),c2(Z, Y))
  p2_b2(X, Y), if_(c3(X, Z),c4(Z, Y))
  p2_c1(X, Y), if_(d1(X, Z),d2(Z, Y))
  p3_a(X, Y), if_(p3_b1(X, Z),p3_b2(Z, Y))
  p3_b1(X, Y), if_(p3_c1(X, Z),c2(Z, Y))
  p3_b2(X, Y), if_(c3(X, Z),c4(Z, Y))
  p3_c1(X, Y), if_(d1(X, Z),d2(Z, Y))
  p4_a(X, Y), if_(p4_b1(X, Z),p4_b2(Z, Y))
  p4_b1(X, Y), if_(p4_c1(X, Z),c2(Z, Y))
  p4_b2(X, Y), if_(c3(X, Z),c4(Z, Y))
  p4_c1(X, Y), if_(d1(X, Z),d2(Z, Y))
  p5_a(X, Y), if_(p5_b1(X, Z),p5_b2(Z, Y))
  p5_b1(X, Y), if_(p5_c1(X, Z),c2(Z, Y))
  p5_b2(X, Y), if_(c3(X, Z),c4(Z, Y))
  p5_c1(X, Y), if_(d1(X, Z),d2(Z, Y))
  a(X, Y), if_(p1_a(X, Y))
  a(X, Y), if_(p2_a(X, Y))
  a(X, Y), if_(p3_a(X, Y))
  a(X, Y), if_(p4_a(X, Y))
  a(X, Y), if_(p5_a(X, Y))
  b1(X, Y), if_(p1_b1(X, Y))
  b1(X, Y), if_(p2_b1(X, Y))
  b1(X, Y), if_(p3_b1(X, Y))
  b1(X, Y), if_(p4_b1(X, Y))
  b1(X, Y), if_(p5_b1(X, Y))
  b2(X, Y), if_(p1_b2(X, Y))
  b2(X, Y), if_(p2_b2(X, Y))
  b2(X, Y), if_(p3_b2(X, Y))
  b2(X, Y), if_(p4_b2(X, Y))
  b2(X, Y), if_(p5_b2(X, Y))

def query_a(facts):
  return infer(rules=rules_join_duplicate, bindings=[(pred, facts[pred]) for pred in facts], queries=['a'])

def query_b1(facts):
  return infer(rules=rules_join_duplicate, bindings=[(pred, facts[pred]) for pred in facts], queries=['b1'])

def query_b2(facts):
  return infer(rules=rules_join_duplicate, bindings=[(pred, facts[pred]) for pred in facts], queries=['b2'])

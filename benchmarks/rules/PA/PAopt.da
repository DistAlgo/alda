# same as PA except with reversed order of rule 1 in rule set desc_rs

import functools

class PA(process):
    def setup(ClassDef, Member, Name):
        self.defined = None
        self.extending = None
        self.desc = None
        self.roots = None
    
#    def rules(name = 'class_extends_rs'):
#    def rules(name = class_extends_rs):
    def rules(class_extends_rs):
#    def rules_class_extends_rs():
        defined(c), if_(ClassDef(_, c,_, _,_,_))
        extending(c,b), if_(ClassDef(_, c,baselist, _,_,_),
                            Member(baselist,base, _), Name(base,b, _))
    
    @functools.lru_cache(maxsize=None)
    def height(c):
        return 0 if not some((_,_c) in extending)\
            else 1 + maxof(height(d), (d,_c) in extending)
    
    def rules(desc_rs):
        desc(c,r), if_(roots(r), extending(c,r))
        desc(c,r), if_(extending(c,b), desc(b,r)) 
    
    @functools.lru_cache(maxsize=None)
    def num_desc(r):
        return lenof(c, (c,_r) in desc)
    
    def run():
        num_defined = len(defined)
        num_extending = len(extending)
        avg_extending = num_extending/num_defined
        roots = setof(c, (_,c) in extending, not some((_c,_) in extending))
        print('____ result 2: defined, extending, roots:\t%s\t%s\t%s' %
              (num_defined, num_extending, len(roots)))
        
        max_height = maxof(height(r), r in roots)
        roots_max_height = setof(r, r in roots, height(r) == max_height)
        print('____ result 3: max_height, roots_max_height:\t%s\t%s' %
              (max_height, len(roots_max_height)))
        
        max_desc = maxof(num_desc(r), r in roots)
        roots_max_desc = setof(r, r in roots, num_desc(r) == max_desc)
        print('____ result 4: desc, max_desc, roots_max_desc:\t%s\t%s\t%s' %
              (len(desc), max_desc, len(roots_max_desc)))

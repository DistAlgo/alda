def constraint(name='schedule', pars={students, slots, prefs}):
    
    # Parameters:
    students: set[int]  # students as a set of integers
    slots: set[int]     # slots as a set of integers
    prefs: dict(key=(students,slots), val=ints(0,1))  # preferences as a map,
    # mapping (student,slot) to 1 if the student prefers the slot, and 0 o.w.

    # Decision variables:
    # mapping (student,slot) to 1 if the student is assigned the slot; 0 o.w.
    assign: dict(key=(students,slots), val=ints(0,1))
    # number of students whose assignment meet their preferences
    npref: int = sumof(1, s in students, 
                       some(t in slots, has= assign[s,t]==1 and prefs[s,t]==1))
    # npref: int = sumof(prefs[s,t]*assign[s,t], s in students, t in slots)
    
    # Constraints:
    # each studten is assigned to exactly one slot
    c1 = each(s in students, has= sumof(assign[s,t], t in slots) == 1)
    # each slot is assigned at most 6 students
    c2 = each(t in slots, has= sumof(assign[s,t], s in students) <=6)
    
    # Return: any assignment with the maximum number of preference met
    return anyof((assign,npref), c1, c2, to_max(npref))

# reading data from input file, the file you have written before Midterm 2:
import sys, csv
infile = sys.argv[1] if len(sys.argv) > 1 else 'input.csv'
with open(infile) as csvfile:
    data = list(csv.reader(csvfile, delimiter=','))

# prepare parameter values for our constraint optimization problem:
students = set(ints(len(data) - 2))
slots = set(ints(len(data[0]) - 4))
prefs = [[1 if col else 0 for col in row[2:-2]] for row in data[2:]]
print(len(students), len(slots), len(prefs))

# obtain result from solving the constraint optimization problem:
result = query(constraint='schedule')

# print number of students who are assigned a slot they prefer:
print(result['npref']) 

# prepare and print the assignment of students to each slot:
assign = result['assign']
student_dict = {i : row[1]+' '+row[0] for i,row in enumerate(data[2:])}
slot_dict = {j : s[0]+' '+s[1] 
             for j,s in enumerate(list(zip(data[0],data[1]))[2:-2])}
output='\n'.join(str(j) +','+ slot_dict[j-1] +','+ 
                 ','.join(student_dict[i-1] for i in students 
                          if assign[i-1][j-1])
                 for j in slots)

#assign_list = listof((j, slot_dict[j-1],
#                      listof(student_dict[i-1], i in students,
#                             assign[i-1][j-1])), 
#                     j in slots)
#
#output='\n'.join(str(slot[0])+','+slot[1]+','+
#                 ','.join(str(s) for s in slot[2]) for slot in assign_list)

#print(output)

with open('result.csv','w') as outfile:
    outfile.write(output)

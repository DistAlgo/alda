def csp_vertex_cover(vertex, edge):
  # Parameters: 
  vertex: set[int]                                  # vertices as a set of integers
  edge: dict[key:(vertex,vertex), val:int[0:1]]     # edges as an adj matrix
  
  # Decision variables: 
  # mapping vertex to 1 if the vertex is in the vertex cover, and 0 o.w.
  vc: dict[key:vertex, val:int[0:1]]                # vertex cover as a map
  nvertex: int = sumof(1, v in vertex, vc[v] == 1)  # number of vertices, the objective function

  # Constraints: each edge has at least one end in the vertex cover
  cover = each(i in vertex, j in vertex, has=
               edge[i,j] == 0 or vc[i] == 1 or vc[j] == 1)
  
  # Return: any vertex cover with the minimum number of vertices
  return anyof((vc, nvertex), cover, to_min(nvertex))
    
v = int[1:6]
e = [[0,1,1,0,0,0],
     [1,0,1,1,1,1],
     [1,1,0,0,0,0],
     [0,1,0,0,0,0],
     [0,1,0,0,0,0],
     [0,1,0,0,0,0]]

vc, nvertex = csp_vertex_cover(v, e)
print(vc)                     # value of decision variable vc in solution
print(nvertex)                # value of decision variable nvertex
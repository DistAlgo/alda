def csp_tsp(n, edge):
	# Variables:
	n: int                                           # number of vertices
	edge: dict[key: (int[1:n], int[1:n]), val: int]# a set of edges with length
	route: dict[key: int[1:n], val: int[1:n]]      # a route, sequence of vertices
	
	# Constraints:
	# visit all vertices exactly once
	once = alldiff(route[i], i in int[1:n])
	# the sequence of vertices form a circle
	def circle():
		edge[route[n],route[1]] > 0
		each(i in int[1:n-1], has= edge[route[i],route[i+1]] > 0)

	# Target:
	# find a route of minimum length
	obj: int = edge[route[n],route[1]] + \
	           sumof(edge[route[i],route[i+1]], i in int[1:n-1])
	return anyof((route,obj), once, circle, to_min(obj))



from pprint import pprint

# data from https://www.chegg.com/homework-help/questions-and-answers/solve-problem-genetic-algorithm-ga-q7873215
n = 7
edge = [[0,12,10,0,0,0,12],
		[12,0,8,12,0,0,0],
		[10,8,0,11,3,0,9],
		[0,12,11,0,11,10,0],
		[0,0,3,11,0,6,7],
		[0,0,0,10,6,0,9],
		[12,0,9,0,7,9,0]]

result = csp_tsp(n, edge)
pprint(result)